apply from: "${rootDir}/config/jacoco/config.gradle"

project.afterEvaluate {
    if (android.hasProperty("applicationVariants")) {
        android.applicationVariants.all { variant ->
            if (variant.buildType)
            createVariantCoverage(variant)
        }
    } else if (android.hasProperty("libraryVariants")) {
        android.libraryVariants.all { variant ->
            createVariantCoverage(variant)
        }
    }
}

private def createVariantCoverage(variant) {
    def variantName = variant.name
    def testTaskName = "test${variantName.capitalize()}UnitTest"
    def coverageTaskName = "test${variantName.capitalize()}Coverage"

    // Add unit test coverage tasks
    tasks.create(name: coverageTaskName, type: JacocoReport, dependsOn: testTaskName) {
        group = "Reporting"
        description = "Generate Jacoco coverage reports for the ${variantName.capitalize()} build."

        reports {
            html.required = true
            xml.required = true
        }

        def javaClasses = fileTree(
            dir: "${project.buildDir}/intermediates/javac/${variantName}/classes",
            excludes: project.ext.jacocoExcludes
        )
        def kotlinClasses = fileTree(
            dir: "${project.buildDir}/tmp/kotlin-classes/${variantName}",
            excludes: project.ext.jacocoExcludes
        )
        classDirectories.from = files([javaClasses, kotlinClasses])

        sourceDirectories.from = files([
            "$project.projectDir/src/main/java",
            "$project.projectDir/src/${variantName}/java",
            "$project.projectDir/src/main/kotlin",
            "$project.projectDir/src/${variantName}/kotlin"
        ])

        executionData.from = files("${project.buildDir}/jacoco/${testTaskName}.exec")
    }

    // Add unit test coverage verification tasks
    tasks.create(name: "${coverageTaskName}Verification", type: JacocoCoverageVerification, dependsOn: coverageTaskName) {
        group = "Reporting"
        description = "Verifies Jacoco coverage for the ${variantName.capitalize()} build."
        violationRules project.ext.jacocoRules

        def javaClasses = fileTree(
            dir: "${project.buildDir}/intermediates/javac/${variantName}/classes",
            excludes: project.ext.jacocoExcludes
        )
        def kotlinClasses = fileTree(
            dir: "${project.buildDir}/tmp/kotlin-classes/${variantName}",
            excludes: project.ext.jacocoExcludes
        )
        classDirectories.from = files([javaClasses, kotlinClasses])

        sourceDirectories.from = files([
            "$project.projectDir/src/main/java",
            "$project.projectDir/src/${variantName}/java",
            "$project.projectDir/src/main/kotlin",
            "$project.projectDir/src/${variantName}/kotlin"
        ])

        executionData.from = files("${project.buildDir}/jacoco/${testTaskName}.exec")
    }
}
